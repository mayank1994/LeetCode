/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        if(root==null)
            return null;
        
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        return sb.toString();
        
    }
    
    public void serializeHelper(TreeNode root, StringBuilder sb){
        
        if(root==null)
            return;
        
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
        sb.append(Integer.valueOf(root.val)).append(" ");
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
        if(data==null || data.length()==0)
            return null;        
        
        String[] nodes = data.split(" ");
        int[] index = new int[] {nodes.length - 1};
        return deserializeHelper(nodes, index, Integer.MIN_VALUE);  
                
    }
    
    
    public TreeNode deserializeHelper(String[] nodes, int[] index, int min) {
        
        if(index[0]<0 || Integer.valueOf(nodes[index[0]]) <=min)
            return null;
        
        TreeNode root = new TreeNode(Integer.valueOf(nodes[index[0]--]));
        root.right = deserializeHelper(nodes, index, root.val);
        root.left = deserializeHelper(nodes, index, min);
        return root;

}
}
// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
